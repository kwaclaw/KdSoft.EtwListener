syntax = "proto3";

//import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
//import "google/protobuf/any.proto";
//import "google/protobuf/wrappers.proto";

package KdSoft.EtwLogging;

message ProviderSettingsList {
  repeated ProviderSetting provider_settings = 1;
}

message ProviderSetting {
  string name = 1;
  TraceEventLevel level = 2;
  uint64 match_keywords = 3;
}

message EtwEvent {
  string provider_name = 1;
  uint32 id = 2;
  string task_name = 3;
  uint32 opcode = 4;
  string opcode_name = 5;
  TraceEventLevel level = 6;
  int32 version = 7;
  int64 keywords = 8;
  uint32 channel = 9;
  google.protobuf.Timestamp time_stamp = 10;
  string formatted_message = 11;
  map<string, string> payload = 12;
}

message EtwEventBatch {
  repeated EtwEvent events = 1;
}

message EtwEventResponse {
  int32 events_received = 1;
}

message EventSinkProfile {
  string sink_type  = 1;
  string name = 2;
  string version = 3;
  // JSON representation
  string options = 4;
  // JSON representation
  string credentials = 5;
  bool persistent_channel = 6;
  uint32 batch_size = 7;
  uint32 max_write_delay_mSecs = 8;
}

message EventSinkProfiles {
  map<string, EventSinkProfile> profiles = 1;
}

message EventSinkState {
  EventSinkProfile profile = 1;
  string error = 2;
}

message LiveViewColumn {
  string name = 1;
  string label = 2;
  string type = 3;
}

message LiveViewOptions {
  repeated int32 standard_columns = 1;
  repeated LiveViewColumn payload_column_list = 2;
  repeated int32 payload_columns = 3;
}

message AgentState {
  string id = 1;
  string site = 2;
  string host = 3;

  /// <summary>
  /// Indicates if the session has started and has not ended yet.
  /// </summary>
  bool is_running = 4;

  /// <summary>
  /// Indicates if session has started and then stopped.
  /// Would indicate <c>false</c> if session has not started yet.
  /// </summary>
  bool is_stopped = 5;

  repeated ProviderSetting enabled_providers = 6;
  ProcessingState processing_state = 7;
  map<string, EventSinkState> event_sinks = 8;
  LiveViewOptions live_view_options = 9;
}

message AgentStates {
  repeated AgentState agents = 1;
}

message FilterPart {
  string name = 1;
  string code = 2;
  int32 indent = 3;
}

message Filter {
  int32 template_version = 1;
  repeated FilterPart filter_parts = 2;
}

message TextLine {
  // source text in line
  string text = 1;
  // line number
  int32 line = 2;
}

message LineSpan {
  int32 start = 1;
  int32 end = 2;
  int32 indent = 3;
}

message FilterSource {
  int32 template_version = 1;
  // all text lines of the filter source
  repeated TextLine source_lines = 2;
  // for each dynamic (non-template) filter part the line and character position span
  repeated LineSpan dynamic_line_spans = 3;
}

message ProcessingState {
  FilterSource filter_source = 3;
}

message EventSessionState {
  ProcessingState processing_state = 1;
  repeated ProviderSetting provider_settings = 2;
  LiveViewOptions live_view_options = 3;
}

message ProcessingOptions {
  Filter filter = 3;
}

message EventSessionOptions {
  ProcessingOptions processing_options = 1;
  repeated ProviderSetting provider_settings = 2;
}

message LinePosition {
  int32 line = 1;
  int32 character = 2;
}

message LinePositionSpan {
  LinePosition start = 1;
  LinePosition end = 2;
}

message CompileDiagnostic {
  string id = 1;
  bool is_warning_as_error = 2;
  int32 warning_level = 3;
  CompileDiagnosticSeverity severity = 4;
  LinePositionSpan line_span = 5;
  string message = 6;
}

message BuildFilterResult {
  repeated CompileDiagnostic diagnostics = 1;
  FilterSource filter_source = 2; 
}

// Note: multiple enums in the same namespace cannot have duplicate value identifiers, so we prefix them;
//       the C# code generator will remove these prefixes if they match the enum name
enum TraceEventLevel {
  //     Always log the event (It also can mean that the provider decides the verbosity)
  //     You probably should not use it....
  TraceEventLevel_ALWAYS = 0;
  //     Events that indicate critical conditions
  TraceEventLevel_CRITICAL = 1;
  //     Events that indicate error conditions
  TraceEventLevel_ERROR = 2;
  //     Events that indicate warning conditions
  TraceEventLevel_WARNING = 3;
  //     Events that indicate information
  TraceEventLevel_INFORMATIONAL = 4;
  //     Events that verbose information
  TraceEventLevel_VERBOSE = 5;
}

enum CompileDiagnosticSeverity {
  //     Something that is an issue, as determined by some authority, but is not surfaced
  //     through normal means. There may be different mechanisms that act on these issues.
  CompileDiagnosticSeverity_HIDDEN = 0;
  //     Information that does not indicate a problem (i.e. not prescriptive).
  CompileDiagnosticSeverity_INFO = 1;
  //     Something suspicious but allowed.
  CompileDiagnosticSeverity_WARNING = 2;
  //     Something not allowed by the rules of the language or other authority.
  CompileDiagnosticSeverity_ERROR = 3;
}
